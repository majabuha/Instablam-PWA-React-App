{"ast":null,"code":"export function cameraOff(videoElement) {\n  videoElement.srcObject = null;\n  console.log('cameraOff', videoElement);\n}\nexport async function cameraOn(context, videoElement) {\n  const constraints = {\n    audio: false,\n    video: {\n      facingMode: 'user',\n      width: 500,\n      height: 400\n    }\n  };\n\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\n    context.setVideoStream(stream);\n    videoElement.srcObject = stream;\n    videoElement.addEventListener('loadedmetadata', () => {\n      videoElement.play();\n    });\n  } catch (error) {\n    console.log('Failed to get video. ' + error.message);\n  }\n}\nexport async function takePicture(videoStream, gallery, setGallery) {\n  if (!videoStream) {\n    console.log(\"Camera off!\");\n    return alert(\"Turn camera on to proceed!\");\n  } else {\n    try {\n      console.log(\"Taking picture!\");\n      const imageCapture = new ImageCapture(videoStream.getVideoTracks()[0]);\n      let blob = await imageCapture.takePhoto();\n      console.log(blob);\n      const picture = URL.createObjectURL(blob);\n      const photoTakenTime = photoTime();\n      let dateTimePhotoTaken;\n\n      if (photoTakenTime.time && photoTakenTime.date) {\n        dateTimePhotoTaken = photoTakenTime.date + \" \" + photoTakenTime.time;\n      } else {\n        dateTimePhotoTaken = \"Unknown time\";\n      }\n\n      const takenPicture = {\n        url: picture,\n        class: \"gallery\",\n        alt: \"Instablam photo\",\n        location: (await getGeolocation()) || \"Location unknown\",\n        dateTimePhotoTaken\n      };\n      console.log(takenPicture);\n      console.log(gallery);\n      setGallery([...gallery, takenPicture]);\n    } catch (error) {\n      console.log(`Error occured! '${error.message}'.`);\n    }\n  }\n}\nexport async function getGeolocation() {\n  let geolocation;\n\n  try {\n    geolocation = await getImageGeolocation();\n  } catch (error) {\n    console.log(\"Location not available.\");\n  }\n\n  return geolocation;\n}\n\nasync function getImageGeolocation() {\n  return new Promise((resolve, reject) => {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const coordinates = `${position.coords.latitude}, \n                    ${position.coords.longitude}`;\n        console.log(coordinates);\n        resolve(coordinates);\n      }, error => reject(error));\n    } else {\n      console.log(\"Need permission to use location!\");\n    }\n  });\n}\n\nfunction photoTime() {\n  const currentdate = new Date();\n  const date = currentdate.getDate() + \".\" + (currentdate.getMonth() + 1) + \".\" + currentdate.getFullYear();\n  const time = currentdate.getHours() + \":\" + currentdate.getMinutes();\n  return {\n    date,\n    time\n  };\n} // async function getImageGeolocation() {\n//             if (\"geolocation\" in navigator) {    \n//                 const city = await navigator.geolocation.getCurrentPosition(lookupPosition)  \n//                 return city\n//             }  else {\n//                 alert(\"Need permission to use location!\");\n//             }\n//     }\n//     async function lookupPosition(position) {\n//         let latitude = position.coords.latitude;\n//         let longitude = position.coords.longitude;\n//         console.log(latitude, longitude)\n//         try {\n//             const response = await fetch(`https://geocode.xyz/${latitude},${longitude}?geoit=json`)\n//             const data = await response.json()\n//             if (data.error) {\n//     \t\t\tconsole.log(\"Couldn't get position<br>\" + data.error.message ) \n//                 return null\n//             }\n//             console.log(data.city)\n//             return data.city\n//         } catch (error) {\n//             console.log( \"Couldn't get position\" + error.message)\n//             return null\n//         }\n//     }","map":{"version":3,"sources":["C:/Users/SlimthYoggi/Desktop/AWJ/12122021/Instablam-app/src/components/utils/mediaUtils.js"],"names":["cameraOff","videoElement","srcObject","console","log","cameraOn","context","constraints","audio","video","facingMode","width","height","stream","navigator","mediaDevices","getUserMedia","setVideoStream","addEventListener","play","error","message","takePicture","videoStream","gallery","setGallery","alert","imageCapture","ImageCapture","getVideoTracks","blob","takePhoto","picture","URL","createObjectURL","photoTakenTime","photoTime","dateTimePhotoTaken","time","date","takenPicture","url","class","alt","location","getGeolocation","geolocation","getImageGeolocation","Promise","resolve","reject","getCurrentPosition","position","coordinates","coords","latitude","longitude","currentdate","Date","getDate","getMonth","getFullYear","getHours","getMinutes"],"mappings":"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","sourcesContent":["export function cameraOff(videoElement) {\n    videoElement.srcObject = null\n    console.log('cameraOff', videoElement);\n}\n\nexport async function cameraOn(context, videoElement) {\n    const constraints = {\n        audio: false,\n        video: {\n            facingMode: 'user',\n            width: 500,\n            height: 400\n        }\n    }\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia(constraints)\n        context.setVideoStream(stream)\n        videoElement.srcObject = stream\n        videoElement.addEventListener('loadedmetadata', () => {\n            videoElement.play()\n        })\n    } catch (error) {\n        console.log('Failed to get video. ' + error.message);\n    }\n}\n\nexport async function takePicture(videoStream, gallery, setGallery) {\n\n    if (!videoStream) {\n        console.log(\"Camera off!\")\n        return alert(\"Turn camera on to proceed!\")\n    } else {\n\n        try {\n            console.log(\"Taking picture!\")\n\n        const imageCapture = new ImageCapture(videoStream.getVideoTracks()[0])\n        let blob = await imageCapture.takePhoto()\n        console.log(blob)\n\n        const picture = URL.createObjectURL(blob)\n\n        const photoTakenTime = photoTime();\n        let dateTimePhotoTaken;\n        if (photoTakenTime.time && photoTakenTime.date) {\n            dateTimePhotoTaken = photoTakenTime.date + \" \" + photoTakenTime.time\n        } else {\n            dateTimePhotoTaken = \"Unknown time\";\n        }\n        const takenPicture = {\n            url: picture,\n            class: \"gallery\",\n            alt: \"Instablam photo\",\n            location: (await getGeolocation() || \"Location unknown\"),\n            dateTimePhotoTaken\n        }\n        console.log(takenPicture)\n        console.log(gallery)\n\n        setGallery([...gallery, takenPicture])\n\n        } catch (error) {\n            console.log(`Error occured! '${error.message}'.`);\n        }        \n    }\n}\n\nexport async function getGeolocation() {\n    let geolocation;\n    try {\n        geolocation = await getImageGeolocation()\n    } catch (error) {\n        console.log(\"Location not available.\")\n    }\n    return geolocation\n}\n\n\nasync function getImageGeolocation() {\n    return new Promise((resolve, reject) => {\n        if (\"geolocation\" in navigator) {\n\n            navigator.geolocation.getCurrentPosition(\n                (position) => {\n                    const coordinates = `${position.coords.latitude}, \n                    ${position.coords.longitude}` \n                    console.log(coordinates)\n                    resolve(coordinates)\n                },\n                (error) => reject(error)\n            )\n\n        }  else {\n            console.log(\"Need permission to use location!\");\n        }\n       \n    })\n}\n\nfunction photoTime() {\n    const currentdate = new Date()\n    const date = currentdate.getDate() + \".\" +\n        (currentdate.getMonth() + 1) + \".\" + currentdate.getFullYear()\n    const time = currentdate.getHours() + \":\" + currentdate.getMinutes() \n    return { date, time }\n}\n\n// async function getImageGeolocation() {\n//             if (\"geolocation\" in navigator) {    \n//                 const city = await navigator.geolocation.getCurrentPosition(lookupPosition)  \n//                 return city\n//             }  else {\n//                 alert(\"Need permission to use location!\");\n//             }\n//     }\n    \n//     async function lookupPosition(position) {\n//         let latitude = position.coords.latitude;\n//         let longitude = position.coords.longitude;\n//         console.log(latitude, longitude)\n//         try {\n//             const response = await fetch(`https://geocode.xyz/${latitude},${longitude}?geoit=json`)\n//             const data = await response.json()\n//             if (data.error) {\n//     \t\t\tconsole.log(\"Couldn't get position<br>\" + data.error.message ) \n//                 return null\n//             }\n//             console.log(data.city)\n//             return data.city\n//         } catch (error) {\n//             console.log( \"Couldn't get position\" + error.message)\n//             return null\n//         }\n//     }\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}